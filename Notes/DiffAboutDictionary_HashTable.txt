字典和哈希表的区别：
	总体比较：
	1）：单线程程序中推荐使用 Dictionary, 有泛型优势, 且读取速度较快, 容量利用更充分.
	2）：多线程程序中推荐使用 Hashtable, 默认的 Hashtable 允许单线程写入, 多线程读取, 
		对 Hashtable 进一步调用 Synchronized()方法可以获得完全线程安全的类型.
		而Dictionary 非线程安全, 必须人为使用 lock 语句进行保护, 效率大减.
	3）：Dictionary 有按插入顺序排列数据的特性 (注: 但当调用 Remove() 删除过节点后顺序被打乱),
		因此在需要体现顺序的情境中使用 Dictionary 能获得一定方便.
	哈希表允许单线程写入，多线程读取，key和value都是object类型的，涉及到拆箱和装箱的操作。
	
	解决hash冲突的方法：
		hashtable：
		是通过探测法解决哈希冲突的，
		当通过散列值取得的位置Postion以及被占用的时候，就会增加一个位移x值判断下一个位置Postion+x是否被占用，
		如果仍然被占用就继续往下位移x判断Position+2*x位置是否被占用，如果没有被占用则将值放入其中。
		当HashTable中的可用空间越来越小时，则获取得到可用空间的难度越来越大，消耗的时间就越多。
		
		Dictionary：
			分离链接散列表的数据结构来解决的。
	
		ConcurrentDictionary：
			表示可由多个线程同时访问的键/值对的线程安全集合。
			可由多个线程同时访问，且线程安全。用法和Dictionary十分类似。
			
	性能比较：（string 引用类型）
		考虑到hashtable的拆箱和装箱操作，对于值类型的数据 hashtable的性能会受影响
		写入大量数据：
			Dictionary最快：分析（解决hash冲突的方法不一样），因为hashtable再写入的时候，最后会一直循环找空的位置。
						而字典则直接挂在链表上即可。
			
		遍历数据：
			hashtable最快：因为dic遍历需要去遍历链表，而hashtable可以直接 按照顺序遍历？（我觉得是这样的）
			
		

关于hash桶：			
https://www.cnblogs.com/yinrq/p/5584885.html
https://blog.csdn.net/wangpengqi/article/details/9716315
另一种解决哈希冲突的做法：
	为每个Hash值，建立一个Hash桶。
	对Hash表中每个Hash值建立一个冲突表，即将冲突的几个记录以表的形式存储在其中。
	类似挂链表，是默认预先再每个hash值下都挂一个链表。
	

HashSet<T>、数组、List<T>、ArrayList的区别：
(JAVA中HaseMap类似C#中的字典)
https://blog.csdn.net/qiaoquan3/article/details/51380992

HashSet<T> 是将存储的对象本身作为散列函数f(key)的key，来计算地址的。
	它里面存储的都是无序的集合，它的写入和读取速度都比较快，主要用于比较多的数据操作，
	尤其是可以进行各种集合的操作，比如就两个集合的交集等。
	简单的说它的Contains方法的性能在大数据量时比List<T>好得多。
	HashSet<T>的Contains方法复杂度是O(1)，List<T>的Contains方法复杂度是O(n)。

ArrayList:
	可变长数组，当长度不足时，会自动扩容为原来的两倍，里面存储的是object类型，
	可以在里面添加不同类型的元素，可能涉及到拆箱和装箱，影响性能。

List<T>:ArrayList的泛型版本  本质上的数据结构是一个数组（insert和remove的复杂度也是O(n)，通过Array.Copy方法实现）
	List的内部有一个数组来保存数据，List的遍历是通过迭代器实现的  
	C#中的链表容器是LinkedList<T>


数组：在初始化时需要指定数组大小和类型，在内存中时连续存储的。
	